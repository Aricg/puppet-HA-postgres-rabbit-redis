global_defs {
       notification_email {
}
       router_id BES_PROD
}
vrrp_script chk_postgres {
       script "/usr/sbin/check_postgres"
       interval 2
}
!Postgres VIP
vrrp_instance VI_16_PGSQL {
       state <%= @state %>
       interface <%= @interface %>
       virtual_router_id 16
       priority <%= @priority %>
       <%= @prempt %>
       advert_int 2
virtual_ipaddress {
       <%= @postgres_vip %>/<%= @cidr %> brd <%= @broad_cast %> dev <%= @interface %>
}
track_script {
       chk_postgres
}
notify_master "/usr/bin/touch /tmp/trigger_file"
notify_fault "/usr/bin/touch /tmp/trigger_file"
}

vrrp_script chk_redis {
    script "killall -0 redis-server"
    interval 2
}
!REDIS VIP
vrrp_instance VI_15_REDIS {
    state <%= @state %>
    interface <%= @interface %>
    virtual_router_id 26
    priority <%= @priority %>
    <%= @prempt %>
    advert_int 2
    virtual_ipaddress {
		<%= @redis_vip %>/<%= @cidr %> brd <%= @broad_cast %> dev <%= @interface %>
    }
    track_script {
        chk_redis
    }
notify_master "/etc/init.d/redis-server start-master"
#slave of ip must be the other nodes ip address, so that IF the node fails it will call fault and try to attach to the master.
notify_backup "/etc/init.d/redis-server start-slave <%= slave_of_ip %> 6379"
notify_fault "/etc/init.d/redis-server start-master"
!notify_up "/usr/bin/sudo -u redis /var/lib/redis/redis.sh -m"
!notify_down "/usr/bin/sudo -u redis /var/lib/redis/redis.sh -s"
}
