#!/bin/bash 
#
##Managed by puppet, do not edit
##This is meanst to be run on the slave, with the masters ip as the passed variable. ($1)
#
sourcehost=$1
datadir=/var/lib/postgresql/9.2/main
archivedir=/var/lib/postgresql/9.2/archive
archivedirdest=/var/lib/postgresql/9.2/archive
whoami=$(whoami)


	if [[ "$whoami" != "postgres" ]]
	then
	      echo "This script must be run as user Postgres"
	      exit 1
	fi


	if [ "$1" = "" ]
	then
		echo "usage: $0 masters ip address"
		echo
	exit 1
	fi
	     



#if cat /var/lib/postgresql/.ssh/authorized_keys 

#Keepalived will trigger failover when it detects postgres stopping on the master node. -- this disables failover (/usr/sbin/check_postgres source:puppet:/keepalived/templates/check_postgres.erb) is a requirement
DontFailOverDuringThisOperation () {
touch /tmp/dont_fail_over
ssh postgres@$sourcehost "touch /tmp/dont_fail_over"
}


#TODO Check to see if master is actually a master
#TODO check to see if this machien can become a slave (/var/lib/postgresql/9.2/main/recovery.conf source: ./postgres/templates/slave_recovery.erb) is a requirement)
#prepare local server to become the new slave server. 
PrepareLocalServer () {
rm /tmp/trigger_file
bash /etc/init.d/postgresql stop
mv <%= @data_dir %>/recovery.done <%= @data_dir %>/recovery.conf
}

#put master into  backup mode
PutMasterIntoBackupMode () {
ssh postgres@$sourcehost "psql -c \"SELECT pg_start_backup('Streaming Replication', true)\" postgres"
}

#rsync masters data to local postgres dir
RsyncWhileLive () {
rsync -C -av --delete -e ssh --exclude recovery.conf --exclude recovery.done --exclude postmaster.pid  --exclude pg_xlog/ $sourcehost:$datadir/ $datadir/
}


#this archives the the WAL log (ends writing to it and moves it to the $archive dir
StopBackupModeAndArchiveIntoWallLog () {
ssh postgres@$sourcehost "psql -c \"SELECT pg_stop_backup()\" postgres"
rsync -C -a -e ssh $sourcehost:$archivedir/ $archivedirdest/
}


#stop postgres and copy transactions made during the last two rsync's
StopPostgreSqlAndFinishRsync () {
ssh postgres@$sourcehost "/etc/init.d/postgresql stop"
rsync -av --delete  -e ssh $sourcehost:$datadir/pg_xlog/ $datadir/pg_xlog/
}

#Start both Master and Slave
StartLocalAndThenRemotePostGreSql () {
/etc/init.d/postgresql start
ssh postgres@$sourcehost "/etc/init.d/postgresql start"
}

#Reenable failover 
ReenableFailover () {
rm /tmp/dont_fail_over
ssh postgres@$sourcehost "rm /tmp/dont_fail_over"
}

#Execute above operations

DontFailOverDuringThisOperation
PrepareLocalServer
PutMasterIntoBackupMode
RsyncWhileLive
StopBackupModeAndArchiveIntoWallLog
StopPostgreSqlAndFinishRsync
StartLocalAndThenRemotePostGreSql
ReenableFailover





